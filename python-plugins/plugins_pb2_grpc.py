# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import plugins_pb2 as plugins__pb2


class PluginsStub(object):
    """*
    Paddle's plugins service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InitializeProjectStub = channel.unary_unary(
                '/io.paddle.plugin.interop.Plugins/InitializeProjectStub',
                request_serializer=plugins__pb2.InitializeProjectRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.ImportPyModulePlugins = channel.unary_unary(
                '/io.paddle.plugin.interop.Plugins/ImportPyModulePlugins',
                request_serializer=plugins__pb2.ImportPyModulePluginsRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.ImportPyPackagePlugins = channel.unary_unary(
                '/io.paddle.plugin.interop.Plugins/ImportPyPackagePlugins',
                request_serializer=plugins__pb2.ImportPyPackagePluginsRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.Configure = channel.unary_unary(
                '/io.paddle.plugin.interop.Plugins/Configure',
                request_serializer=plugins__pb2.ProcessPluginRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.Tasks = channel.unary_unary(
                '/io.paddle.plugin.interop.Plugins/Tasks',
                request_serializer=plugins__pb2.ProcessPluginRequest.SerializeToString,
                response_deserializer=plugins__pb2.GetTasksResponse.FromString,
                )
        self.Initialize = channel.unary_unary(
                '/io.paddle.plugin.interop.Plugins/Initialize',
                request_serializer=plugins__pb2.ProcessTaskRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.Act = channel.unary_unary(
                '/io.paddle.plugin.interop.Plugins/Act',
                request_serializer=plugins__pb2.ProcessTaskRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class PluginsServicer(object):
    """*
    Paddle's plugins service definition.
    """

    def InitializeProjectStub(self, request, context):
        """*
        Initializes project stub on Python Plugins Server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ImportPyModulePlugins(self, request, context):
        """*
        Imports plugins from specified local python modules into Python Plugins Server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ImportPyPackagePlugins(self, request, context):
        """*
        Imports plugins from specified python packages into Python Plugins Server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Configure(self, request, context):
        """*
        Executes configure of specified project with specified plugin.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Tasks(self, request, context):
        """*
        Requests info about all tasks of specified plugin.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Initialize(self, request, context):
        """*
        Initializes specified task with respect to specified project.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Act(self, request, context):
        """*
        Executes action of specified task with respect to specified project.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PluginsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InitializeProjectStub': grpc.unary_unary_rpc_method_handler(
                    servicer.InitializeProjectStub,
                    request_deserializer=plugins__pb2.InitializeProjectRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ImportPyModulePlugins': grpc.unary_unary_rpc_method_handler(
                    servicer.ImportPyModulePlugins,
                    request_deserializer=plugins__pb2.ImportPyModulePluginsRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ImportPyPackagePlugins': grpc.unary_unary_rpc_method_handler(
                    servicer.ImportPyPackagePlugins,
                    request_deserializer=plugins__pb2.ImportPyPackagePluginsRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'Configure': grpc.unary_unary_rpc_method_handler(
                    servicer.Configure,
                    request_deserializer=plugins__pb2.ProcessPluginRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'Tasks': grpc.unary_unary_rpc_method_handler(
                    servicer.Tasks,
                    request_deserializer=plugins__pb2.ProcessPluginRequest.FromString,
                    response_serializer=plugins__pb2.GetTasksResponse.SerializeToString,
            ),
            'Initialize': grpc.unary_unary_rpc_method_handler(
                    servicer.Initialize,
                    request_deserializer=plugins__pb2.ProcessTaskRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'Act': grpc.unary_unary_rpc_method_handler(
                    servicer.Act,
                    request_deserializer=plugins__pb2.ProcessTaskRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'io.paddle.plugin.interop.Plugins', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Plugins(object):
    """*
    Paddle's plugins service definition.
    """

    @staticmethod
    def InitializeProjectStub(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/io.paddle.plugin.interop.Plugins/InitializeProjectStub',
            plugins__pb2.InitializeProjectRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ImportPyModulePlugins(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/io.paddle.plugin.interop.Plugins/ImportPyModulePlugins',
            plugins__pb2.ImportPyModulePluginsRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ImportPyPackagePlugins(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/io.paddle.plugin.interop.Plugins/ImportPyPackagePlugins',
            plugins__pb2.ImportPyPackagePluginsRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Configure(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/io.paddle.plugin.interop.Plugins/Configure',
            plugins__pb2.ProcessPluginRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Tasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/io.paddle.plugin.interop.Plugins/Tasks',
            plugins__pb2.ProcessPluginRequest.SerializeToString,
            plugins__pb2.GetTasksResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Initialize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/io.paddle.plugin.interop.Plugins/Initialize',
            plugins__pb2.ProcessTaskRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Act(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/io.paddle.plugin.interop.Plugins/Act',
            plugins__pb2.ProcessTaskRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
