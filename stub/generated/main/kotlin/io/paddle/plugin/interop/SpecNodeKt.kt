//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: project.proto

package io.paddle.plugin.interop;

@kotlin.jvm.JvmSynthetic
public inline fun specNode(block: io.paddle.plugin.interop.SpecNodeKt.Dsl.() -> kotlin.Unit): io.paddle.plugin.interop.SpecNode =
  io.paddle.plugin.interop.SpecNodeKt.Dsl._create(io.paddle.plugin.interop.SpecNode.newBuilder()).apply { block() }._build()
public object SpecNodeKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.paddle.plugin.interop.SpecNode.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.paddle.plugin.interop.SpecNode.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.paddle.plugin.interop.SpecNode = _builder.build()

    /**
     * <code>.io.paddle.plugin.interop.CompositeSpecNode composite = 1;</code>
     */
    public var composite: io.paddle.plugin.interop.CompositeSpecNode
      @JvmName("getComposite")
      get() = _builder.getComposite()
      @JvmName("setComposite")
      set(value) {
        _builder.setComposite(value)
      }
    /**
     * <code>.io.paddle.plugin.interop.CompositeSpecNode composite = 1;</code>
     */
    public fun clearComposite() {
      _builder.clearComposite()
    }
    /**
     * <code>.io.paddle.plugin.interop.CompositeSpecNode composite = 1;</code>
     * @return Whether the composite field is set.
     */
    public fun hasComposite(): kotlin.Boolean {
      return _builder.hasComposite()
    }

    /**
     * <code>.io.paddle.plugin.interop.ArraySpecNode array = 2;</code>
     */
    public var array: io.paddle.plugin.interop.ArraySpecNode
      @JvmName("getArray")
      get() = _builder.getArray()
      @JvmName("setArray")
      set(value) {
        _builder.setArray(value)
      }
    /**
     * <code>.io.paddle.plugin.interop.ArraySpecNode array = 2;</code>
     */
    public fun clearArray() {
      _builder.clearArray()
    }
    /**
     * <code>.io.paddle.plugin.interop.ArraySpecNode array = 2;</code>
     * @return Whether the array field is set.
     */
    public fun hasArray(): kotlin.Boolean {
      return _builder.hasArray()
    }

    /**
     * <code>.io.paddle.plugin.interop.StringSpecNode str = 3;</code>
     */
    public var str: io.paddle.plugin.interop.StringSpecNode
      @JvmName("getStr")
      get() = _builder.getStr()
      @JvmName("setStr")
      set(value) {
        _builder.setStr(value)
      }
    /**
     * <code>.io.paddle.plugin.interop.StringSpecNode str = 3;</code>
     */
    public fun clearStr() {
      _builder.clearStr()
    }
    /**
     * <code>.io.paddle.plugin.interop.StringSpecNode str = 3;</code>
     * @return Whether the str field is set.
     */
    public fun hasStr(): kotlin.Boolean {
      return _builder.hasStr()
    }

    /**
     * <code>.io.paddle.plugin.interop.BooleanSpecNode boolean = 4;</code>
     */
    public var boolean: io.paddle.plugin.interop.BooleanSpecNode
      @JvmName("getBoolean")
      get() = _builder.getBoolean()
      @JvmName("setBoolean")
      set(value) {
        _builder.setBoolean(value)
      }
    /**
     * <code>.io.paddle.plugin.interop.BooleanSpecNode boolean = 4;</code>
     */
    public fun clearBoolean() {
      _builder.clearBoolean()
    }
    /**
     * <code>.io.paddle.plugin.interop.BooleanSpecNode boolean = 4;</code>
     * @return Whether the boolean field is set.
     */
    public fun hasBoolean(): kotlin.Boolean {
      return _builder.hasBoolean()
    }

    /**
     * <code>.io.paddle.plugin.interop.IntegerSpecNode integer = 5;</code>
     */
    public var integer: io.paddle.plugin.interop.IntegerSpecNode
      @JvmName("getInteger")
      get() = _builder.getInteger()
      @JvmName("setInteger")
      set(value) {
        _builder.setInteger(value)
      }
    /**
     * <code>.io.paddle.plugin.interop.IntegerSpecNode integer = 5;</code>
     */
    public fun clearInteger() {
      _builder.clearInteger()
    }
    /**
     * <code>.io.paddle.plugin.interop.IntegerSpecNode integer = 5;</code>
     * @return Whether the integer field is set.
     */
    public fun hasInteger(): kotlin.Boolean {
      return _builder.hasInteger()
    }
    public val actualCase: io.paddle.plugin.interop.SpecNode.ActualCase
      @JvmName("getActualCase")
      get() = _builder.getActualCase()

    public fun clearActual() {
      _builder.clearActual()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun io.paddle.plugin.interop.SpecNode.copy(block: io.paddle.plugin.interop.SpecNodeKt.Dsl.() -> kotlin.Unit): io.paddle.plugin.interop.SpecNode =
  io.paddle.plugin.interop.SpecNodeKt.Dsl._create(this.toBuilder()).apply { block() }._build()
