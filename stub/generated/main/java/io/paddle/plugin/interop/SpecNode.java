// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: project.proto

package io.paddle.plugin.interop;

/**
 * Protobuf type {@code io.paddle.plugin.interop.SpecNode}
 */
public final class SpecNode extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:io.paddle.plugin.interop.SpecNode)
    SpecNodeOrBuilder {
private static final long serialVersionUID = 0L;
  // Use SpecNode.newBuilder() to construct.
  private SpecNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private SpecNode() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new SpecNode();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private SpecNode(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            io.paddle.plugin.interop.CompositeSpecNode.Builder subBuilder = null;
            if (actualCase_ == 1) {
              subBuilder = ((io.paddle.plugin.interop.CompositeSpecNode) actual_).toBuilder();
            }
            actual_ =
                input.readMessage(io.paddle.plugin.interop.CompositeSpecNode.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.paddle.plugin.interop.CompositeSpecNode) actual_);
              actual_ = subBuilder.buildPartial();
            }
            actualCase_ = 1;
            break;
          }
          case 18: {
            io.paddle.plugin.interop.ArraySpecNode.Builder subBuilder = null;
            if (actualCase_ == 2) {
              subBuilder = ((io.paddle.plugin.interop.ArraySpecNode) actual_).toBuilder();
            }
            actual_ =
                input.readMessage(io.paddle.plugin.interop.ArraySpecNode.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.paddle.plugin.interop.ArraySpecNode) actual_);
              actual_ = subBuilder.buildPartial();
            }
            actualCase_ = 2;
            break;
          }
          case 26: {
            io.paddle.plugin.interop.StringSpecNode.Builder subBuilder = null;
            if (actualCase_ == 3) {
              subBuilder = ((io.paddle.plugin.interop.StringSpecNode) actual_).toBuilder();
            }
            actual_ =
                input.readMessage(io.paddle.plugin.interop.StringSpecNode.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.paddle.plugin.interop.StringSpecNode) actual_);
              actual_ = subBuilder.buildPartial();
            }
            actualCase_ = 3;
            break;
          }
          case 34: {
            io.paddle.plugin.interop.BooleanSpecNode.Builder subBuilder = null;
            if (actualCase_ == 4) {
              subBuilder = ((io.paddle.plugin.interop.BooleanSpecNode) actual_).toBuilder();
            }
            actual_ =
                input.readMessage(io.paddle.plugin.interop.BooleanSpecNode.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.paddle.plugin.interop.BooleanSpecNode) actual_);
              actual_ = subBuilder.buildPartial();
            }
            actualCase_ = 4;
            break;
          }
          case 42: {
            io.paddle.plugin.interop.IntegerSpecNode.Builder subBuilder = null;
            if (actualCase_ == 5) {
              subBuilder = ((io.paddle.plugin.interop.IntegerSpecNode) actual_).toBuilder();
            }
            actual_ =
                input.readMessage(io.paddle.plugin.interop.IntegerSpecNode.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.paddle.plugin.interop.IntegerSpecNode) actual_);
              actual_ = subBuilder.buildPartial();
            }
            actualCase_ = 5;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.paddle.plugin.interop.ProjectOuterClass.internal_static_io_paddle_plugin_interop_SpecNode_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.paddle.plugin.interop.ProjectOuterClass.internal_static_io_paddle_plugin_interop_SpecNode_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.paddle.plugin.interop.SpecNode.class, io.paddle.plugin.interop.SpecNode.Builder.class);
  }

  private int actualCase_ = 0;
  private java.lang.Object actual_;
  public enum ActualCase
      implements com.google.protobuf.Internal.EnumLite,
          com.google.protobuf.AbstractMessage.InternalOneOfEnum {
    COMPOSITE(1),
    ARRAY(2),
    STR(3),
    BOOLEAN(4),
    INTEGER(5),
    ACTUAL_NOT_SET(0);
    private final int value;
    private ActualCase(int value) {
      this.value = value;
    }
    /**
     * @param value The number of the enum to look for.
     * @return The enum associated with the given number.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ActualCase valueOf(int value) {
      return forNumber(value);
    }

    public static ActualCase forNumber(int value) {
      switch (value) {
        case 1: return COMPOSITE;
        case 2: return ARRAY;
        case 3: return STR;
        case 4: return BOOLEAN;
        case 5: return INTEGER;
        case 0: return ACTUAL_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public ActualCase
  getActualCase() {
    return ActualCase.forNumber(
        actualCase_);
  }

  public static final int COMPOSITE_FIELD_NUMBER = 1;
  /**
   * <code>.io.paddle.plugin.interop.CompositeSpecNode composite = 1;</code>
   * @return Whether the composite field is set.
   */
  @java.lang.Override
  public boolean hasComposite() {
    return actualCase_ == 1;
  }
  /**
   * <code>.io.paddle.plugin.interop.CompositeSpecNode composite = 1;</code>
   * @return The composite.
   */
  @java.lang.Override
  public io.paddle.plugin.interop.CompositeSpecNode getComposite() {
    if (actualCase_ == 1) {
       return (io.paddle.plugin.interop.CompositeSpecNode) actual_;
    }
    return io.paddle.plugin.interop.CompositeSpecNode.getDefaultInstance();
  }
  /**
   * <code>.io.paddle.plugin.interop.CompositeSpecNode composite = 1;</code>
   */
  @java.lang.Override
  public io.paddle.plugin.interop.CompositeSpecNodeOrBuilder getCompositeOrBuilder() {
    if (actualCase_ == 1) {
       return (io.paddle.plugin.interop.CompositeSpecNode) actual_;
    }
    return io.paddle.plugin.interop.CompositeSpecNode.getDefaultInstance();
  }

  public static final int ARRAY_FIELD_NUMBER = 2;
  /**
   * <code>.io.paddle.plugin.interop.ArraySpecNode array = 2;</code>
   * @return Whether the array field is set.
   */
  @java.lang.Override
  public boolean hasArray() {
    return actualCase_ == 2;
  }
  /**
   * <code>.io.paddle.plugin.interop.ArraySpecNode array = 2;</code>
   * @return The array.
   */
  @java.lang.Override
  public io.paddle.plugin.interop.ArraySpecNode getArray() {
    if (actualCase_ == 2) {
       return (io.paddle.plugin.interop.ArraySpecNode) actual_;
    }
    return io.paddle.plugin.interop.ArraySpecNode.getDefaultInstance();
  }
  /**
   * <code>.io.paddle.plugin.interop.ArraySpecNode array = 2;</code>
   */
  @java.lang.Override
  public io.paddle.plugin.interop.ArraySpecNodeOrBuilder getArrayOrBuilder() {
    if (actualCase_ == 2) {
       return (io.paddle.plugin.interop.ArraySpecNode) actual_;
    }
    return io.paddle.plugin.interop.ArraySpecNode.getDefaultInstance();
  }

  public static final int STR_FIELD_NUMBER = 3;
  /**
   * <code>.io.paddle.plugin.interop.StringSpecNode str = 3;</code>
   * @return Whether the str field is set.
   */
  @java.lang.Override
  public boolean hasStr() {
    return actualCase_ == 3;
  }
  /**
   * <code>.io.paddle.plugin.interop.StringSpecNode str = 3;</code>
   * @return The str.
   */
  @java.lang.Override
  public io.paddle.plugin.interop.StringSpecNode getStr() {
    if (actualCase_ == 3) {
       return (io.paddle.plugin.interop.StringSpecNode) actual_;
    }
    return io.paddle.plugin.interop.StringSpecNode.getDefaultInstance();
  }
  /**
   * <code>.io.paddle.plugin.interop.StringSpecNode str = 3;</code>
   */
  @java.lang.Override
  public io.paddle.plugin.interop.StringSpecNodeOrBuilder getStrOrBuilder() {
    if (actualCase_ == 3) {
       return (io.paddle.plugin.interop.StringSpecNode) actual_;
    }
    return io.paddle.plugin.interop.StringSpecNode.getDefaultInstance();
  }

  public static final int BOOLEAN_FIELD_NUMBER = 4;
  /**
   * <code>.io.paddle.plugin.interop.BooleanSpecNode boolean = 4;</code>
   * @return Whether the boolean field is set.
   */
  @java.lang.Override
  public boolean hasBoolean() {
    return actualCase_ == 4;
  }
  /**
   * <code>.io.paddle.plugin.interop.BooleanSpecNode boolean = 4;</code>
   * @return The boolean.
   */
  @java.lang.Override
  public io.paddle.plugin.interop.BooleanSpecNode getBoolean() {
    if (actualCase_ == 4) {
       return (io.paddle.plugin.interop.BooleanSpecNode) actual_;
    }
    return io.paddle.plugin.interop.BooleanSpecNode.getDefaultInstance();
  }
  /**
   * <code>.io.paddle.plugin.interop.BooleanSpecNode boolean = 4;</code>
   */
  @java.lang.Override
  public io.paddle.plugin.interop.BooleanSpecNodeOrBuilder getBooleanOrBuilder() {
    if (actualCase_ == 4) {
       return (io.paddle.plugin.interop.BooleanSpecNode) actual_;
    }
    return io.paddle.plugin.interop.BooleanSpecNode.getDefaultInstance();
  }

  public static final int INTEGER_FIELD_NUMBER = 5;
  /**
   * <code>.io.paddle.plugin.interop.IntegerSpecNode integer = 5;</code>
   * @return Whether the integer field is set.
   */
  @java.lang.Override
  public boolean hasInteger() {
    return actualCase_ == 5;
  }
  /**
   * <code>.io.paddle.plugin.interop.IntegerSpecNode integer = 5;</code>
   * @return The integer.
   */
  @java.lang.Override
  public io.paddle.plugin.interop.IntegerSpecNode getInteger() {
    if (actualCase_ == 5) {
       return (io.paddle.plugin.interop.IntegerSpecNode) actual_;
    }
    return io.paddle.plugin.interop.IntegerSpecNode.getDefaultInstance();
  }
  /**
   * <code>.io.paddle.plugin.interop.IntegerSpecNode integer = 5;</code>
   */
  @java.lang.Override
  public io.paddle.plugin.interop.IntegerSpecNodeOrBuilder getIntegerOrBuilder() {
    if (actualCase_ == 5) {
       return (io.paddle.plugin.interop.IntegerSpecNode) actual_;
    }
    return io.paddle.plugin.interop.IntegerSpecNode.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (actualCase_ == 1) {
      output.writeMessage(1, (io.paddle.plugin.interop.CompositeSpecNode) actual_);
    }
    if (actualCase_ == 2) {
      output.writeMessage(2, (io.paddle.plugin.interop.ArraySpecNode) actual_);
    }
    if (actualCase_ == 3) {
      output.writeMessage(3, (io.paddle.plugin.interop.StringSpecNode) actual_);
    }
    if (actualCase_ == 4) {
      output.writeMessage(4, (io.paddle.plugin.interop.BooleanSpecNode) actual_);
    }
    if (actualCase_ == 5) {
      output.writeMessage(5, (io.paddle.plugin.interop.IntegerSpecNode) actual_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (actualCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, (io.paddle.plugin.interop.CompositeSpecNode) actual_);
    }
    if (actualCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (io.paddle.plugin.interop.ArraySpecNode) actual_);
    }
    if (actualCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (io.paddle.plugin.interop.StringSpecNode) actual_);
    }
    if (actualCase_ == 4) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, (io.paddle.plugin.interop.BooleanSpecNode) actual_);
    }
    if (actualCase_ == 5) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, (io.paddle.plugin.interop.IntegerSpecNode) actual_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.paddle.plugin.interop.SpecNode)) {
      return super.equals(obj);
    }
    io.paddle.plugin.interop.SpecNode other = (io.paddle.plugin.interop.SpecNode) obj;

    if (!getActualCase().equals(other.getActualCase())) return false;
    switch (actualCase_) {
      case 1:
        if (!getComposite()
            .equals(other.getComposite())) return false;
        break;
      case 2:
        if (!getArray()
            .equals(other.getArray())) return false;
        break;
      case 3:
        if (!getStr()
            .equals(other.getStr())) return false;
        break;
      case 4:
        if (!getBoolean()
            .equals(other.getBoolean())) return false;
        break;
      case 5:
        if (!getInteger()
            .equals(other.getInteger())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (actualCase_) {
      case 1:
        hash = (37 * hash) + COMPOSITE_FIELD_NUMBER;
        hash = (53 * hash) + getComposite().hashCode();
        break;
      case 2:
        hash = (37 * hash) + ARRAY_FIELD_NUMBER;
        hash = (53 * hash) + getArray().hashCode();
        break;
      case 3:
        hash = (37 * hash) + STR_FIELD_NUMBER;
        hash = (53 * hash) + getStr().hashCode();
        break;
      case 4:
        hash = (37 * hash) + BOOLEAN_FIELD_NUMBER;
        hash = (53 * hash) + getBoolean().hashCode();
        break;
      case 5:
        hash = (37 * hash) + INTEGER_FIELD_NUMBER;
        hash = (53 * hash) + getInteger().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.paddle.plugin.interop.SpecNode parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.paddle.plugin.interop.SpecNode parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.paddle.plugin.interop.SpecNode parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.paddle.plugin.interop.SpecNode parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.paddle.plugin.interop.SpecNode parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.paddle.plugin.interop.SpecNode parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.paddle.plugin.interop.SpecNode parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.paddle.plugin.interop.SpecNode parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.paddle.plugin.interop.SpecNode parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.paddle.plugin.interop.SpecNode parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.paddle.plugin.interop.SpecNode parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.paddle.plugin.interop.SpecNode parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.paddle.plugin.interop.SpecNode prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code io.paddle.plugin.interop.SpecNode}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:io.paddle.plugin.interop.SpecNode)
      io.paddle.plugin.interop.SpecNodeOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.paddle.plugin.interop.ProjectOuterClass.internal_static_io_paddle_plugin_interop_SpecNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.paddle.plugin.interop.ProjectOuterClass.internal_static_io_paddle_plugin_interop_SpecNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.paddle.plugin.interop.SpecNode.class, io.paddle.plugin.interop.SpecNode.Builder.class);
    }

    // Construct using io.paddle.plugin.interop.SpecNode.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      actualCase_ = 0;
      actual_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.paddle.plugin.interop.ProjectOuterClass.internal_static_io_paddle_plugin_interop_SpecNode_descriptor;
    }

    @java.lang.Override
    public io.paddle.plugin.interop.SpecNode getDefaultInstanceForType() {
      return io.paddle.plugin.interop.SpecNode.getDefaultInstance();
    }

    @java.lang.Override
    public io.paddle.plugin.interop.SpecNode build() {
      io.paddle.plugin.interop.SpecNode result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.paddle.plugin.interop.SpecNode buildPartial() {
      io.paddle.plugin.interop.SpecNode result = new io.paddle.plugin.interop.SpecNode(this);
      if (actualCase_ == 1) {
        if (compositeBuilder_ == null) {
          result.actual_ = actual_;
        } else {
          result.actual_ = compositeBuilder_.build();
        }
      }
      if (actualCase_ == 2) {
        if (arrayBuilder_ == null) {
          result.actual_ = actual_;
        } else {
          result.actual_ = arrayBuilder_.build();
        }
      }
      if (actualCase_ == 3) {
        if (strBuilder_ == null) {
          result.actual_ = actual_;
        } else {
          result.actual_ = strBuilder_.build();
        }
      }
      if (actualCase_ == 4) {
        if (booleanBuilder_ == null) {
          result.actual_ = actual_;
        } else {
          result.actual_ = booleanBuilder_.build();
        }
      }
      if (actualCase_ == 5) {
        if (integerBuilder_ == null) {
          result.actual_ = actual_;
        } else {
          result.actual_ = integerBuilder_.build();
        }
      }
      result.actualCase_ = actualCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.paddle.plugin.interop.SpecNode) {
        return mergeFrom((io.paddle.plugin.interop.SpecNode)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.paddle.plugin.interop.SpecNode other) {
      if (other == io.paddle.plugin.interop.SpecNode.getDefaultInstance()) return this;
      switch (other.getActualCase()) {
        case COMPOSITE: {
          mergeComposite(other.getComposite());
          break;
        }
        case ARRAY: {
          mergeArray(other.getArray());
          break;
        }
        case STR: {
          mergeStr(other.getStr());
          break;
        }
        case BOOLEAN: {
          mergeBoolean(other.getBoolean());
          break;
        }
        case INTEGER: {
          mergeInteger(other.getInteger());
          break;
        }
        case ACTUAL_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.paddle.plugin.interop.SpecNode parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.paddle.plugin.interop.SpecNode) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int actualCase_ = 0;
    private java.lang.Object actual_;
    public ActualCase
        getActualCase() {
      return ActualCase.forNumber(
          actualCase_);
    }

    public Builder clearActual() {
      actualCase_ = 0;
      actual_ = null;
      onChanged();
      return this;
    }


    private com.google.protobuf.SingleFieldBuilderV3<
        io.paddle.plugin.interop.CompositeSpecNode, io.paddle.plugin.interop.CompositeSpecNode.Builder, io.paddle.plugin.interop.CompositeSpecNodeOrBuilder> compositeBuilder_;
    /**
     * <code>.io.paddle.plugin.interop.CompositeSpecNode composite = 1;</code>
     * @return Whether the composite field is set.
     */
    @java.lang.Override
    public boolean hasComposite() {
      return actualCase_ == 1;
    }
    /**
     * <code>.io.paddle.plugin.interop.CompositeSpecNode composite = 1;</code>
     * @return The composite.
     */
    @java.lang.Override
    public io.paddle.plugin.interop.CompositeSpecNode getComposite() {
      if (compositeBuilder_ == null) {
        if (actualCase_ == 1) {
          return (io.paddle.plugin.interop.CompositeSpecNode) actual_;
        }
        return io.paddle.plugin.interop.CompositeSpecNode.getDefaultInstance();
      } else {
        if (actualCase_ == 1) {
          return compositeBuilder_.getMessage();
        }
        return io.paddle.plugin.interop.CompositeSpecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.io.paddle.plugin.interop.CompositeSpecNode composite = 1;</code>
     */
    public Builder setComposite(io.paddle.plugin.interop.CompositeSpecNode value) {
      if (compositeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        actual_ = value;
        onChanged();
      } else {
        compositeBuilder_.setMessage(value);
      }
      actualCase_ = 1;
      return this;
    }
    /**
     * <code>.io.paddle.plugin.interop.CompositeSpecNode composite = 1;</code>
     */
    public Builder setComposite(
        io.paddle.plugin.interop.CompositeSpecNode.Builder builderForValue) {
      if (compositeBuilder_ == null) {
        actual_ = builderForValue.build();
        onChanged();
      } else {
        compositeBuilder_.setMessage(builderForValue.build());
      }
      actualCase_ = 1;
      return this;
    }
    /**
     * <code>.io.paddle.plugin.interop.CompositeSpecNode composite = 1;</code>
     */
    public Builder mergeComposite(io.paddle.plugin.interop.CompositeSpecNode value) {
      if (compositeBuilder_ == null) {
        if (actualCase_ == 1 &&
            actual_ != io.paddle.plugin.interop.CompositeSpecNode.getDefaultInstance()) {
          actual_ = io.paddle.plugin.interop.CompositeSpecNode.newBuilder((io.paddle.plugin.interop.CompositeSpecNode) actual_)
              .mergeFrom(value).buildPartial();
        } else {
          actual_ = value;
        }
        onChanged();
      } else {
        if (actualCase_ == 1) {
          compositeBuilder_.mergeFrom(value);
        }
        compositeBuilder_.setMessage(value);
      }
      actualCase_ = 1;
      return this;
    }
    /**
     * <code>.io.paddle.plugin.interop.CompositeSpecNode composite = 1;</code>
     */
    public Builder clearComposite() {
      if (compositeBuilder_ == null) {
        if (actualCase_ == 1) {
          actualCase_ = 0;
          actual_ = null;
          onChanged();
        }
      } else {
        if (actualCase_ == 1) {
          actualCase_ = 0;
          actual_ = null;
        }
        compositeBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.io.paddle.plugin.interop.CompositeSpecNode composite = 1;</code>
     */
    public io.paddle.plugin.interop.CompositeSpecNode.Builder getCompositeBuilder() {
      return getCompositeFieldBuilder().getBuilder();
    }
    /**
     * <code>.io.paddle.plugin.interop.CompositeSpecNode composite = 1;</code>
     */
    @java.lang.Override
    public io.paddle.plugin.interop.CompositeSpecNodeOrBuilder getCompositeOrBuilder() {
      if ((actualCase_ == 1) && (compositeBuilder_ != null)) {
        return compositeBuilder_.getMessageOrBuilder();
      } else {
        if (actualCase_ == 1) {
          return (io.paddle.plugin.interop.CompositeSpecNode) actual_;
        }
        return io.paddle.plugin.interop.CompositeSpecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.io.paddle.plugin.interop.CompositeSpecNode composite = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.paddle.plugin.interop.CompositeSpecNode, io.paddle.plugin.interop.CompositeSpecNode.Builder, io.paddle.plugin.interop.CompositeSpecNodeOrBuilder> 
        getCompositeFieldBuilder() {
      if (compositeBuilder_ == null) {
        if (!(actualCase_ == 1)) {
          actual_ = io.paddle.plugin.interop.CompositeSpecNode.getDefaultInstance();
        }
        compositeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.paddle.plugin.interop.CompositeSpecNode, io.paddle.plugin.interop.CompositeSpecNode.Builder, io.paddle.plugin.interop.CompositeSpecNodeOrBuilder>(
                (io.paddle.plugin.interop.CompositeSpecNode) actual_,
                getParentForChildren(),
                isClean());
        actual_ = null;
      }
      actualCase_ = 1;
      onChanged();;
      return compositeBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.paddle.plugin.interop.ArraySpecNode, io.paddle.plugin.interop.ArraySpecNode.Builder, io.paddle.plugin.interop.ArraySpecNodeOrBuilder> arrayBuilder_;
    /**
     * <code>.io.paddle.plugin.interop.ArraySpecNode array = 2;</code>
     * @return Whether the array field is set.
     */
    @java.lang.Override
    public boolean hasArray() {
      return actualCase_ == 2;
    }
    /**
     * <code>.io.paddle.plugin.interop.ArraySpecNode array = 2;</code>
     * @return The array.
     */
    @java.lang.Override
    public io.paddle.plugin.interop.ArraySpecNode getArray() {
      if (arrayBuilder_ == null) {
        if (actualCase_ == 2) {
          return (io.paddle.plugin.interop.ArraySpecNode) actual_;
        }
        return io.paddle.plugin.interop.ArraySpecNode.getDefaultInstance();
      } else {
        if (actualCase_ == 2) {
          return arrayBuilder_.getMessage();
        }
        return io.paddle.plugin.interop.ArraySpecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.io.paddle.plugin.interop.ArraySpecNode array = 2;</code>
     */
    public Builder setArray(io.paddle.plugin.interop.ArraySpecNode value) {
      if (arrayBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        actual_ = value;
        onChanged();
      } else {
        arrayBuilder_.setMessage(value);
      }
      actualCase_ = 2;
      return this;
    }
    /**
     * <code>.io.paddle.plugin.interop.ArraySpecNode array = 2;</code>
     */
    public Builder setArray(
        io.paddle.plugin.interop.ArraySpecNode.Builder builderForValue) {
      if (arrayBuilder_ == null) {
        actual_ = builderForValue.build();
        onChanged();
      } else {
        arrayBuilder_.setMessage(builderForValue.build());
      }
      actualCase_ = 2;
      return this;
    }
    /**
     * <code>.io.paddle.plugin.interop.ArraySpecNode array = 2;</code>
     */
    public Builder mergeArray(io.paddle.plugin.interop.ArraySpecNode value) {
      if (arrayBuilder_ == null) {
        if (actualCase_ == 2 &&
            actual_ != io.paddle.plugin.interop.ArraySpecNode.getDefaultInstance()) {
          actual_ = io.paddle.plugin.interop.ArraySpecNode.newBuilder((io.paddle.plugin.interop.ArraySpecNode) actual_)
              .mergeFrom(value).buildPartial();
        } else {
          actual_ = value;
        }
        onChanged();
      } else {
        if (actualCase_ == 2) {
          arrayBuilder_.mergeFrom(value);
        }
        arrayBuilder_.setMessage(value);
      }
      actualCase_ = 2;
      return this;
    }
    /**
     * <code>.io.paddle.plugin.interop.ArraySpecNode array = 2;</code>
     */
    public Builder clearArray() {
      if (arrayBuilder_ == null) {
        if (actualCase_ == 2) {
          actualCase_ = 0;
          actual_ = null;
          onChanged();
        }
      } else {
        if (actualCase_ == 2) {
          actualCase_ = 0;
          actual_ = null;
        }
        arrayBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.io.paddle.plugin.interop.ArraySpecNode array = 2;</code>
     */
    public io.paddle.plugin.interop.ArraySpecNode.Builder getArrayBuilder() {
      return getArrayFieldBuilder().getBuilder();
    }
    /**
     * <code>.io.paddle.plugin.interop.ArraySpecNode array = 2;</code>
     */
    @java.lang.Override
    public io.paddle.plugin.interop.ArraySpecNodeOrBuilder getArrayOrBuilder() {
      if ((actualCase_ == 2) && (arrayBuilder_ != null)) {
        return arrayBuilder_.getMessageOrBuilder();
      } else {
        if (actualCase_ == 2) {
          return (io.paddle.plugin.interop.ArraySpecNode) actual_;
        }
        return io.paddle.plugin.interop.ArraySpecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.io.paddle.plugin.interop.ArraySpecNode array = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.paddle.plugin.interop.ArraySpecNode, io.paddle.plugin.interop.ArraySpecNode.Builder, io.paddle.plugin.interop.ArraySpecNodeOrBuilder> 
        getArrayFieldBuilder() {
      if (arrayBuilder_ == null) {
        if (!(actualCase_ == 2)) {
          actual_ = io.paddle.plugin.interop.ArraySpecNode.getDefaultInstance();
        }
        arrayBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.paddle.plugin.interop.ArraySpecNode, io.paddle.plugin.interop.ArraySpecNode.Builder, io.paddle.plugin.interop.ArraySpecNodeOrBuilder>(
                (io.paddle.plugin.interop.ArraySpecNode) actual_,
                getParentForChildren(),
                isClean());
        actual_ = null;
      }
      actualCase_ = 2;
      onChanged();;
      return arrayBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.paddle.plugin.interop.StringSpecNode, io.paddle.plugin.interop.StringSpecNode.Builder, io.paddle.plugin.interop.StringSpecNodeOrBuilder> strBuilder_;
    /**
     * <code>.io.paddle.plugin.interop.StringSpecNode str = 3;</code>
     * @return Whether the str field is set.
     */
    @java.lang.Override
    public boolean hasStr() {
      return actualCase_ == 3;
    }
    /**
     * <code>.io.paddle.plugin.interop.StringSpecNode str = 3;</code>
     * @return The str.
     */
    @java.lang.Override
    public io.paddle.plugin.interop.StringSpecNode getStr() {
      if (strBuilder_ == null) {
        if (actualCase_ == 3) {
          return (io.paddle.plugin.interop.StringSpecNode) actual_;
        }
        return io.paddle.plugin.interop.StringSpecNode.getDefaultInstance();
      } else {
        if (actualCase_ == 3) {
          return strBuilder_.getMessage();
        }
        return io.paddle.plugin.interop.StringSpecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.io.paddle.plugin.interop.StringSpecNode str = 3;</code>
     */
    public Builder setStr(io.paddle.plugin.interop.StringSpecNode value) {
      if (strBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        actual_ = value;
        onChanged();
      } else {
        strBuilder_.setMessage(value);
      }
      actualCase_ = 3;
      return this;
    }
    /**
     * <code>.io.paddle.plugin.interop.StringSpecNode str = 3;</code>
     */
    public Builder setStr(
        io.paddle.plugin.interop.StringSpecNode.Builder builderForValue) {
      if (strBuilder_ == null) {
        actual_ = builderForValue.build();
        onChanged();
      } else {
        strBuilder_.setMessage(builderForValue.build());
      }
      actualCase_ = 3;
      return this;
    }
    /**
     * <code>.io.paddle.plugin.interop.StringSpecNode str = 3;</code>
     */
    public Builder mergeStr(io.paddle.plugin.interop.StringSpecNode value) {
      if (strBuilder_ == null) {
        if (actualCase_ == 3 &&
            actual_ != io.paddle.plugin.interop.StringSpecNode.getDefaultInstance()) {
          actual_ = io.paddle.plugin.interop.StringSpecNode.newBuilder((io.paddle.plugin.interop.StringSpecNode) actual_)
              .mergeFrom(value).buildPartial();
        } else {
          actual_ = value;
        }
        onChanged();
      } else {
        if (actualCase_ == 3) {
          strBuilder_.mergeFrom(value);
        }
        strBuilder_.setMessage(value);
      }
      actualCase_ = 3;
      return this;
    }
    /**
     * <code>.io.paddle.plugin.interop.StringSpecNode str = 3;</code>
     */
    public Builder clearStr() {
      if (strBuilder_ == null) {
        if (actualCase_ == 3) {
          actualCase_ = 0;
          actual_ = null;
          onChanged();
        }
      } else {
        if (actualCase_ == 3) {
          actualCase_ = 0;
          actual_ = null;
        }
        strBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.io.paddle.plugin.interop.StringSpecNode str = 3;</code>
     */
    public io.paddle.plugin.interop.StringSpecNode.Builder getStrBuilder() {
      return getStrFieldBuilder().getBuilder();
    }
    /**
     * <code>.io.paddle.plugin.interop.StringSpecNode str = 3;</code>
     */
    @java.lang.Override
    public io.paddle.plugin.interop.StringSpecNodeOrBuilder getStrOrBuilder() {
      if ((actualCase_ == 3) && (strBuilder_ != null)) {
        return strBuilder_.getMessageOrBuilder();
      } else {
        if (actualCase_ == 3) {
          return (io.paddle.plugin.interop.StringSpecNode) actual_;
        }
        return io.paddle.plugin.interop.StringSpecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.io.paddle.plugin.interop.StringSpecNode str = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.paddle.plugin.interop.StringSpecNode, io.paddle.plugin.interop.StringSpecNode.Builder, io.paddle.plugin.interop.StringSpecNodeOrBuilder> 
        getStrFieldBuilder() {
      if (strBuilder_ == null) {
        if (!(actualCase_ == 3)) {
          actual_ = io.paddle.plugin.interop.StringSpecNode.getDefaultInstance();
        }
        strBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.paddle.plugin.interop.StringSpecNode, io.paddle.plugin.interop.StringSpecNode.Builder, io.paddle.plugin.interop.StringSpecNodeOrBuilder>(
                (io.paddle.plugin.interop.StringSpecNode) actual_,
                getParentForChildren(),
                isClean());
        actual_ = null;
      }
      actualCase_ = 3;
      onChanged();;
      return strBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.paddle.plugin.interop.BooleanSpecNode, io.paddle.plugin.interop.BooleanSpecNode.Builder, io.paddle.plugin.interop.BooleanSpecNodeOrBuilder> booleanBuilder_;
    /**
     * <code>.io.paddle.plugin.interop.BooleanSpecNode boolean = 4;</code>
     * @return Whether the boolean field is set.
     */
    @java.lang.Override
    public boolean hasBoolean() {
      return actualCase_ == 4;
    }
    /**
     * <code>.io.paddle.plugin.interop.BooleanSpecNode boolean = 4;</code>
     * @return The boolean.
     */
    @java.lang.Override
    public io.paddle.plugin.interop.BooleanSpecNode getBoolean() {
      if (booleanBuilder_ == null) {
        if (actualCase_ == 4) {
          return (io.paddle.plugin.interop.BooleanSpecNode) actual_;
        }
        return io.paddle.plugin.interop.BooleanSpecNode.getDefaultInstance();
      } else {
        if (actualCase_ == 4) {
          return booleanBuilder_.getMessage();
        }
        return io.paddle.plugin.interop.BooleanSpecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.io.paddle.plugin.interop.BooleanSpecNode boolean = 4;</code>
     */
    public Builder setBoolean(io.paddle.plugin.interop.BooleanSpecNode value) {
      if (booleanBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        actual_ = value;
        onChanged();
      } else {
        booleanBuilder_.setMessage(value);
      }
      actualCase_ = 4;
      return this;
    }
    /**
     * <code>.io.paddle.plugin.interop.BooleanSpecNode boolean = 4;</code>
     */
    public Builder setBoolean(
        io.paddle.plugin.interop.BooleanSpecNode.Builder builderForValue) {
      if (booleanBuilder_ == null) {
        actual_ = builderForValue.build();
        onChanged();
      } else {
        booleanBuilder_.setMessage(builderForValue.build());
      }
      actualCase_ = 4;
      return this;
    }
    /**
     * <code>.io.paddle.plugin.interop.BooleanSpecNode boolean = 4;</code>
     */
    public Builder mergeBoolean(io.paddle.plugin.interop.BooleanSpecNode value) {
      if (booleanBuilder_ == null) {
        if (actualCase_ == 4 &&
            actual_ != io.paddle.plugin.interop.BooleanSpecNode.getDefaultInstance()) {
          actual_ = io.paddle.plugin.interop.BooleanSpecNode.newBuilder((io.paddle.plugin.interop.BooleanSpecNode) actual_)
              .mergeFrom(value).buildPartial();
        } else {
          actual_ = value;
        }
        onChanged();
      } else {
        if (actualCase_ == 4) {
          booleanBuilder_.mergeFrom(value);
        }
        booleanBuilder_.setMessage(value);
      }
      actualCase_ = 4;
      return this;
    }
    /**
     * <code>.io.paddle.plugin.interop.BooleanSpecNode boolean = 4;</code>
     */
    public Builder clearBoolean() {
      if (booleanBuilder_ == null) {
        if (actualCase_ == 4) {
          actualCase_ = 0;
          actual_ = null;
          onChanged();
        }
      } else {
        if (actualCase_ == 4) {
          actualCase_ = 0;
          actual_ = null;
        }
        booleanBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.io.paddle.plugin.interop.BooleanSpecNode boolean = 4;</code>
     */
    public io.paddle.plugin.interop.BooleanSpecNode.Builder getBooleanBuilder() {
      return getBooleanFieldBuilder().getBuilder();
    }
    /**
     * <code>.io.paddle.plugin.interop.BooleanSpecNode boolean = 4;</code>
     */
    @java.lang.Override
    public io.paddle.plugin.interop.BooleanSpecNodeOrBuilder getBooleanOrBuilder() {
      if ((actualCase_ == 4) && (booleanBuilder_ != null)) {
        return booleanBuilder_.getMessageOrBuilder();
      } else {
        if (actualCase_ == 4) {
          return (io.paddle.plugin.interop.BooleanSpecNode) actual_;
        }
        return io.paddle.plugin.interop.BooleanSpecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.io.paddle.plugin.interop.BooleanSpecNode boolean = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.paddle.plugin.interop.BooleanSpecNode, io.paddle.plugin.interop.BooleanSpecNode.Builder, io.paddle.plugin.interop.BooleanSpecNodeOrBuilder> 
        getBooleanFieldBuilder() {
      if (booleanBuilder_ == null) {
        if (!(actualCase_ == 4)) {
          actual_ = io.paddle.plugin.interop.BooleanSpecNode.getDefaultInstance();
        }
        booleanBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.paddle.plugin.interop.BooleanSpecNode, io.paddle.plugin.interop.BooleanSpecNode.Builder, io.paddle.plugin.interop.BooleanSpecNodeOrBuilder>(
                (io.paddle.plugin.interop.BooleanSpecNode) actual_,
                getParentForChildren(),
                isClean());
        actual_ = null;
      }
      actualCase_ = 4;
      onChanged();;
      return booleanBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.paddle.plugin.interop.IntegerSpecNode, io.paddle.plugin.interop.IntegerSpecNode.Builder, io.paddle.plugin.interop.IntegerSpecNodeOrBuilder> integerBuilder_;
    /**
     * <code>.io.paddle.plugin.interop.IntegerSpecNode integer = 5;</code>
     * @return Whether the integer field is set.
     */
    @java.lang.Override
    public boolean hasInteger() {
      return actualCase_ == 5;
    }
    /**
     * <code>.io.paddle.plugin.interop.IntegerSpecNode integer = 5;</code>
     * @return The integer.
     */
    @java.lang.Override
    public io.paddle.plugin.interop.IntegerSpecNode getInteger() {
      if (integerBuilder_ == null) {
        if (actualCase_ == 5) {
          return (io.paddle.plugin.interop.IntegerSpecNode) actual_;
        }
        return io.paddle.plugin.interop.IntegerSpecNode.getDefaultInstance();
      } else {
        if (actualCase_ == 5) {
          return integerBuilder_.getMessage();
        }
        return io.paddle.plugin.interop.IntegerSpecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.io.paddle.plugin.interop.IntegerSpecNode integer = 5;</code>
     */
    public Builder setInteger(io.paddle.plugin.interop.IntegerSpecNode value) {
      if (integerBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        actual_ = value;
        onChanged();
      } else {
        integerBuilder_.setMessage(value);
      }
      actualCase_ = 5;
      return this;
    }
    /**
     * <code>.io.paddle.plugin.interop.IntegerSpecNode integer = 5;</code>
     */
    public Builder setInteger(
        io.paddle.plugin.interop.IntegerSpecNode.Builder builderForValue) {
      if (integerBuilder_ == null) {
        actual_ = builderForValue.build();
        onChanged();
      } else {
        integerBuilder_.setMessage(builderForValue.build());
      }
      actualCase_ = 5;
      return this;
    }
    /**
     * <code>.io.paddle.plugin.interop.IntegerSpecNode integer = 5;</code>
     */
    public Builder mergeInteger(io.paddle.plugin.interop.IntegerSpecNode value) {
      if (integerBuilder_ == null) {
        if (actualCase_ == 5 &&
            actual_ != io.paddle.plugin.interop.IntegerSpecNode.getDefaultInstance()) {
          actual_ = io.paddle.plugin.interop.IntegerSpecNode.newBuilder((io.paddle.plugin.interop.IntegerSpecNode) actual_)
              .mergeFrom(value).buildPartial();
        } else {
          actual_ = value;
        }
        onChanged();
      } else {
        if (actualCase_ == 5) {
          integerBuilder_.mergeFrom(value);
        }
        integerBuilder_.setMessage(value);
      }
      actualCase_ = 5;
      return this;
    }
    /**
     * <code>.io.paddle.plugin.interop.IntegerSpecNode integer = 5;</code>
     */
    public Builder clearInteger() {
      if (integerBuilder_ == null) {
        if (actualCase_ == 5) {
          actualCase_ = 0;
          actual_ = null;
          onChanged();
        }
      } else {
        if (actualCase_ == 5) {
          actualCase_ = 0;
          actual_ = null;
        }
        integerBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>.io.paddle.plugin.interop.IntegerSpecNode integer = 5;</code>
     */
    public io.paddle.plugin.interop.IntegerSpecNode.Builder getIntegerBuilder() {
      return getIntegerFieldBuilder().getBuilder();
    }
    /**
     * <code>.io.paddle.plugin.interop.IntegerSpecNode integer = 5;</code>
     */
    @java.lang.Override
    public io.paddle.plugin.interop.IntegerSpecNodeOrBuilder getIntegerOrBuilder() {
      if ((actualCase_ == 5) && (integerBuilder_ != null)) {
        return integerBuilder_.getMessageOrBuilder();
      } else {
        if (actualCase_ == 5) {
          return (io.paddle.plugin.interop.IntegerSpecNode) actual_;
        }
        return io.paddle.plugin.interop.IntegerSpecNode.getDefaultInstance();
      }
    }
    /**
     * <code>.io.paddle.plugin.interop.IntegerSpecNode integer = 5;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.paddle.plugin.interop.IntegerSpecNode, io.paddle.plugin.interop.IntegerSpecNode.Builder, io.paddle.plugin.interop.IntegerSpecNodeOrBuilder> 
        getIntegerFieldBuilder() {
      if (integerBuilder_ == null) {
        if (!(actualCase_ == 5)) {
          actual_ = io.paddle.plugin.interop.IntegerSpecNode.getDefaultInstance();
        }
        integerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.paddle.plugin.interop.IntegerSpecNode, io.paddle.plugin.interop.IntegerSpecNode.Builder, io.paddle.plugin.interop.IntegerSpecNodeOrBuilder>(
                (io.paddle.plugin.interop.IntegerSpecNode) actual_,
                getParentForChildren(),
                isClean());
        actual_ = null;
      }
      actualCase_ = 5;
      onChanged();;
      return integerBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:io.paddle.plugin.interop.SpecNode)
  }

  // @@protoc_insertion_point(class_scope:io.paddle.plugin.interop.SpecNode)
  private static final io.paddle.plugin.interop.SpecNode DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.paddle.plugin.interop.SpecNode();
  }

  public static io.paddle.plugin.interop.SpecNode getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<SpecNode>
      PARSER = new com.google.protobuf.AbstractParser<SpecNode>() {
    @java.lang.Override
    public SpecNode parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new SpecNode(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<SpecNode> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<SpecNode> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.paddle.plugin.interop.SpecNode getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

