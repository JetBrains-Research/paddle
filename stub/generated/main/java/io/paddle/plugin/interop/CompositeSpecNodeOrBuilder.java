// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: project.proto

package io.paddle.plugin.interop;

public interface CompositeSpecNodeOrBuilder extends
    // @@protoc_insertion_point(interface_extends:io.paddle.plugin.interop.CompositeSpecNode)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>string title = 1;</code>
   * @return The title.
   */
  java.lang.String getTitle();
  /**
   * <code>string title = 1;</code>
   * @return The bytes for title.
   */
  com.google.protobuf.ByteString
      getTitleBytes();

  /**
   * <code>string description = 2;</code>
   * @return The description.
   */
  java.lang.String getDescription();
  /**
   * <code>string description = 2;</code>
   * @return The bytes for description.
   */
  com.google.protobuf.ByteString
      getDescriptionBytes();

  /**
   * <code>repeated string required = 3;</code>
   * @return A list containing the required.
   */
  java.util.List<java.lang.String>
      getRequiredList();
  /**
   * <code>repeated string required = 3;</code>
   * @return The count of required.
   */
  int getRequiredCount();
  /**
   * <code>repeated string required = 3;</code>
   * @param index The index of the element to return.
   * @return The required at the given index.
   */
  java.lang.String getRequired(int index);
  /**
   * <code>repeated string required = 3;</code>
   * @param index The index of the value to return.
   * @return The bytes of the required at the given index.
   */
  com.google.protobuf.ByteString
      getRequiredBytes(int index);

  /**
   * <code>map&lt;string, .io.paddle.plugin.interop.SpecNode&gt; properties = 4;</code>
   */
  int getPropertiesCount();
  /**
   * <code>map&lt;string, .io.paddle.plugin.interop.SpecNode&gt; properties = 4;</code>
   */
  boolean containsProperties(
      java.lang.String key);
  /**
   * Use {@link #getPropertiesMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, io.paddle.plugin.interop.SpecNode>
  getProperties();
  /**
   * <code>map&lt;string, .io.paddle.plugin.interop.SpecNode&gt; properties = 4;</code>
   */
  java.util.Map<java.lang.String, io.paddle.plugin.interop.SpecNode>
  getPropertiesMap();
  /**
   * <code>map&lt;string, .io.paddle.plugin.interop.SpecNode&gt; properties = 4;</code>
   */

  io.paddle.plugin.interop.SpecNode getPropertiesOrDefault(
      java.lang.String key,
      io.paddle.plugin.interop.SpecNode defaultValue);
  /**
   * <code>map&lt;string, .io.paddle.plugin.interop.SpecNode&gt; properties = 4;</code>
   */

  io.paddle.plugin.interop.SpecNode getPropertiesOrThrow(
      java.lang.String key);

  /**
   * <code>repeated .io.paddle.plugin.interop.CompositeSpecNode valid = 5;</code>
   */
  java.util.List<io.paddle.plugin.interop.CompositeSpecNode> 
      getValidList();
  /**
   * <code>repeated .io.paddle.plugin.interop.CompositeSpecNode valid = 5;</code>
   */
  io.paddle.plugin.interop.CompositeSpecNode getValid(int index);
  /**
   * <code>repeated .io.paddle.plugin.interop.CompositeSpecNode valid = 5;</code>
   */
  int getValidCount();
  /**
   * <code>repeated .io.paddle.plugin.interop.CompositeSpecNode valid = 5;</code>
   */
  java.util.List<? extends io.paddle.plugin.interop.CompositeSpecNodeOrBuilder> 
      getValidOrBuilderList();
  /**
   * <code>repeated .io.paddle.plugin.interop.CompositeSpecNode valid = 5;</code>
   */
  io.paddle.plugin.interop.CompositeSpecNodeOrBuilder getValidOrBuilder(
      int index);
}
