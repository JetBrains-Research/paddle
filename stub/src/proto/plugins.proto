syntax = "proto3";

option java_multiple_files = true;

import "google/protobuf/empty.proto";
package io.paddle.plugin.interop;

// Paddle's plugins service definition.
service Plugins {
  /**
  Requests info about all available plugins provided by a service.
  Note: using stream because of potential large list of info.
   */
  rpc GetPluginsInfo (google.protobuf.Empty) returns (stream PluginsInfo) {}

  /**
  Executes configure of specified project with specified plugin.
   */
  rpc Configure (ConfigureRequest) returns (google.protobuf.Empty) {}

  /**
  Requests info about all tasks of specified plugin.
   */
  rpc GetTasks (GetTasksRequest) returns (GetTasksResponse) {}

  // todo: before this should implement mechanism of cross-plugin extensions communication
  //  rpc GetExtensions (GetExtensionsRequest) returns () {}

  //  rpc Initialize (TaskProcessRequest) returns (google.protobuf.Empty) {}

  rpc Run (TaskProcessRequest) returns (google.protobuf.Empty) {}
}

// The response message containing the batch of info about plugins.
message PluginsInfo {
  repeated string id = 1;
}

message ConfigureRequest {
  string projectId = 1;
  string pluginId = 2;
}

message GetTasksRequest {
  string pluginId = 1;
}

message GetTasksResponse {
  repeated TaskInfo taskInfoList = 1;
}

message TaskInfo {
  string id = 1;
  string group = 2;
  repeated TaskInfo deps = 3;
}

message TaskProcessRequest {
  string pluginId = 1;
  string taskId = 2;
}
